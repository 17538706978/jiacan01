  

  经过一段vue项目的实战练习,我从中收获了很多东西,对于vue.js有了一个整体的了解和认识,同时也意识到了自己在学习vue的过程中有哪些知识点运用的还不够灵活,也找到了很多自己的不足之处。在经过很多练习之后，我才明白vue是用来干什么的，在一开始我只是接触到vue的概念是一个虚拟操作DOM元素节点的渐进式框架，但是如何虚拟？如何操作DOM节点？这一切的工作原理我都不太清楚，但做了这个项目后，我发现原来vue就是针对于数据源进行操作，以此来创建和操作dom节点的，如果需要什么逻辑和更改，只需要对进行数据源进行更改操作就可以了，进而省去了很多逻辑的原生代码，从而高效的对整个页面进行渲染的过程。

  而vue脚手架我一开始接触的时候，对它的概念也是很模糊，不太清楚它的存在意义是具体做什么的？经过这一系列练习过后，原来vue-cli（脚手架）是用来快速搭建单个页面的脚手架，它可以自动升成vue以及webpack项目模板。在做项目之前我对于创建好这个项目工程中的各个文件夹以及文件也不是很熟悉，不知道哪个文件具体有什么作用，整个流程也没有一个系统的认识（就是先做什么后做什么）。在这次练习过后，我明白了原来index.html是整个前端页面的开始，也就是说在项目整合打包以后显示出的就是这个页面，而这个页面中所显示的内容就App.vue这个组件，而App.vue中要写什么内容，可以引入一个新的组件，比如一个网站的首页内容，那么访问这个项目的时候显示的就是这个引入的新组件的页面内容。不过在访问之前要配置路由信息，而router文件夹下的index.js就是用来配置路由信息的。main.js中呢？它里边的内容就是创建了一个vue实例，而这个vue实例的作用范围就是index.html中相应id的div，这个实例中的局部组件就是App.vue，而在main.js中要引入整个项目所用到的所有js模块文件，比如轮播插件，axios，vuex，store等等。。。不过在此之前要在计算机终端环境中进入该项目的根目录然后利用npm包管理工具，来事先下载好这些文件才能正常使用。再接下来的事情就是写一个个的页面了，只需要在compoents文件夹下新建vue文件就可以了，在每次创建完毕后，都要去配置该路由组件的路由信息。再一个就是store公共数据源对象，这个store可以提供每个路由都能访问到的数据源（也就是store对象中的state状态值），以及公共方法（也就是mutations，actions异步执行的方法具体细节和区别还不太清楚），还有就是getters（类似于computed计算属性）。


  说到公共数据源也是我本次做vue项目的遗憾和不足之处，因为在做项目之前我应该整个项目所用到的网络请求回来的数据存放到公共数据源中的state状态值里，然后一些项目多个页面多次用到的方法我也应该存到公共方法里边，这样我在哪个界面需要用到的时候，我就可以直接进行引用就可以了，从而就省去了很多麻烦，不用在跳转路由的时候把数据传来传去了，同时也解决了刷新界面就数据消失的bug。总的来说本次项目我对于公共数据源的运用还没有很灵活，这也是我的不足之处，以后再做项目肯定就会注意了，还有就是computed的这个属性我用的也不是很多，以及在做历史记录时用到的本地存储cookie，之前对于cookie的运用并不熟练，也很容易忘记，经过本次练习，又加深对本地存储的印象，感觉这个本地存储还是很有用途的。
 

  还有一点很重要的就是通过本次项目练习，要学会分析数据源，根据提供的后台接口网络请求回来的数据，从而在前端以正确的方式来接受数据达到页面的正确渲染。其实做项目练习的目的不就是要熟悉整个项目的流程，以及各个结构是什么作用，学会分析数据源，灵活运用讲过的知识点吗？而不是为了完成任务而完成任务，要明白我从中要得到些什么，学会到什么，自己的不足在哪里，今后如何改进？这些才是最重要的，也不用纠结于我有没有完成任务（当然完成任务是最好的），有没有解决掉某个bug。
  以上就是我的个人总结，仅属于个人观点，如果有错误还请及时告知，我会加以改正！